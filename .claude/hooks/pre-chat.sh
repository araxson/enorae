#!/bin/bash

# Claude Code Pre-Chat Hook
# This hook ensures Claude reads ALL critical project documentation before starting any work

set -e

PROJECT_ROOT="/Users/afshin/Desktop/Enorae"

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🚨 MANDATORY DOCUMENTATION READING - ENORAE PROJECT"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Generate fresh project tree
echo "🌳 Step 1: Generating fresh project tree..."
if python3 "$PROJECT_ROOT/scripts/generate-project-tree.py" 2>/dev/null; then
    echo "   ✅ Project tree generated: docs/PROJECT_TREE.md"
else
    echo "   ⚠️  Warning: Failed to generate project tree"
fi
echo ""

echo "⚠️  You MUST read ALL of the following documents before proceeding:"
echo ""

# Core Documentation
echo "📋 CORE DOCUMENTATION (MANDATORY):"
echo "   1. ✅ CLAUDE.md - AI Development Guidelines (13KB)"
echo "   2. ✅ README.md - Project Overview (9KB)"
echo "   3. ✅ docs/index.md - Documentation Index (15KB)"
echo "   4. ✅ docs/PROJECT_TREE.md - Current Project Structure (auto-generated)"
echo ""

# Architecture Documentation
echo "🏗️  ARCHITECTURE DOCUMENTATION (MANDATORY):"
echo "   5. ✅ docs/02-architecture/overview.md (28KB)"
echo "      - Why single app, database analysis, design decisions"
echo "   6. ✅ docs/02-architecture/project-structure.md (51KB)"
echo "      - Complete file tree, all routes, all features"
echo "   7. ✅ docs/02-architecture/roles-and-routing.md (12KB)"
echo "      - 11 roles, 4 portals, middleware, auth flow"
echo "   8. ✅ docs/02-architecture/naming-conventions.md (20KB)"
echo "      - File/folder naming rules, 10 patterns, examples"
echo ""

# Database Documentation
echo "🗄️  DATABASE DOCUMENTATION (MANDATORY):"
echo "   9. ✅ docs/03-database/schema-overview.md (9KB)"
echo "      - 42 tables, 108 functions, 8 schemas breakdown"
echo "   10. ✅ docs/03-database/detailed-analysis.md (12KB)"
echo "      - Deep audit, critical findings, health score"
echo "   11. ✅ docs/03-database/best-practices.md (22KB)"
echo "      - RLS performance (94% faster), query optimization"
echo ""

# Frontend Documentation
echo "🎨 FRONTEND DOCUMENTATION (MANDATORY):"
echo "   12. ✅ docs/04-frontend/component-patterns.md (~25KB)"
echo "      - DAL pattern, type safety, component patterns"
echo "   13. ✅ docs/04-frontend/state-and-performance.md (~8KB)"
echo "      - State management, performance optimization"
echo "   14. ✅ docs/04-frontend/error-handling-and-testing.md (~7KB)"
echo "      - Error handling, testing strategies"
echo "   15. ✅ docs/04-frontend/reference.md (~8KB)"
echo "      - Quick reference, conventions, checklist"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "⚠️  CRITICAL RULES - ZERO TOLERANCE:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "✅ MUST DO:"
echo "   • Query from public views ONLY (not schema.table)"
echo "   • Use Database['public']['Views'] for types"
echo "   • Add 'server-only' directive in ALL DAL files"
echo "   • Check auth in EVERY DAL function"
echo "   • Wrap auth.uid() in (select ...) for 94% faster RLS"
echo "   • Use kebab-case for all file names"
echo "   • Use shadcn/ui components ONLY"
echo "   • Add explicit filters (.eq('user_id', user.id))"
echo ""
echo "❌ NEVER DO:"
echo "   • Create or modify database tables/schema"
echo "   • Query schema tables directly (.schema('...'))"
echo "   • Use Tables types (use Views types)"
echo "   • Create custom UI primitives"
echo "   • Use 'any' types"
echo "   • Skip auth checks in DAL"
echo "   • Create files with -v2, -new, -fixed suffixes"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📊 PROJECT QUICK REFERENCE:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Database:   42 tables, 108 functions, 10 public views"
echo "Schema:     8 business domains (organization, catalog, scheduling, etc.)"
echo "Roles:      11 roles (super_admin → guest)"
echo "Portals:    4 route groups (marketing, customer, staff, business, admin)"
echo "Features:   19 feature modules"
echo "Tech:       Next.js 15, React 19, TypeScript 5.6, Supabase, shadcn/ui"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📁 FILE NAMING QUICK REFERENCE:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Folders:    kebab-case/"
echo "Components: kebab-case.tsx         (salon-card.tsx)"
echo "DAL:        [feature].queries.ts   (salon.queries.ts)"
echo "Actions:    [feature].actions.ts   (salon.actions.ts)"
echo "Types:      [feature].types.ts     (salon.types.ts)"
echo "Hooks:      use-[name].ts          (use-salon.ts)"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🎯 BEFORE YOU START:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "1. ✅ Have you read ALL 15 documentation files?"
echo "2. ✅ Have you reviewed the PROJECT_TREE.md (current structure)?"
echo "3. ✅ Do you understand the public views pattern?"
echo "4. ✅ Do you know the 11 roles and 4 portals?"
echo "5. ✅ Are you clear on naming conventions?"
echo "6. ✅ Do you know the RLS performance patterns?"
echo "7. ✅ Have you reviewed the DAL pattern?"
echo ""
echo "If you answered NO to any of these, STOP and read the docs!"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ DOCUMENTATION READING COMPLETE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "You may now proceed with your task."
echo "Total documentation: ~210KB across 15 files (including fresh PROJECT_TREE.md)"
echo ""
echo "💡 TIP: Keep docs/index.md and docs/PROJECT_TREE.md open for reference"
echo ""
